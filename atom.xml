<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张广群的博客</title>
  
  <subtitle>个人学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zhangguangqun.com/"/>
  <updated>2019-04-24T14:31:12.096Z</updated>
  <id>https://www.zhangguangqun.com/</id>
  
  <author>
    <name>张广群</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>swift 语言学习 - 5. 枚举和结构体</title>
    <link href="https://www.zhangguangqun.com/20190424/swift05/"/>
    <id>https://www.zhangguangqun.com/20190424/swift05/</id>
    <published>2019-04-24T14:23:10.000Z</published>
    <updated>2019-04-24T14:31:12.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="枚举和结构体"><a href="#枚举和结构体" class="headerlink" title="枚举和结构体"></a>枚举和结构体</h1><h2 id="使用-enum-来创建一个枚举，像创建类和其他命名的类型一样，枚举可以有方法。"><a href="#使用-enum-来创建一个枚举，像创建类和其他命名的类型一样，枚举可以有方法。" class="headerlink" title="使用 enum 来创建一个枚举，像创建类和其他命名的类型一样，枚举可以有方法。"></a>使用 enum 来创建一个枚举，像创建类和其他命名的类型一样，枚举可以有方法。</h2><p>枚举的 rawValue 从 0 开始记数，依次加 1，如果某个 case 赋了特殊的值，那么从这个之后的再在一个的基础上进行加 1 记数。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Rank</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> ace = <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> two, three, four, five, six, seven, eight, nine, ten</span><br><span class="line">    <span class="keyword">case</span> jack, queen, king</span><br><span class="line">    <span class="keyword">case</span> test = <span class="number">20</span></span><br><span class="line">    <span class="keyword">case</span> test2</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">simpleDescription</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .ace:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"ace"</span></span><br><span class="line">        <span class="keyword">case</span> .jack:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"jack"</span></span><br><span class="line">        <span class="keyword">case</span> .queen:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"queen"</span></span><br><span class="line">        <span class="keyword">case</span> .king:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"king"</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">String</span>(<span class="keyword">self</span>.rawValue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ace = <span class="type">Rank</span>.ace</span><br><span class="line"><span class="keyword">let</span> aceRawValue = ace.rawValue</span><br><span class="line"><span class="built_in">print</span>(aceRawValue) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Rank</span>.jack.rawValue) <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Rank</span>.test.rawValue)  <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Rank</span>.test2.rawValue)  <span class="comment">// 21</span></span><br></pre></td></tr></table></figure><h2 id="枚举的类型可以是-String-和浮点型"><a href="#枚举的类型可以是-String-和浮点型" class="headerlink" title="枚举的类型可以是 String 和浮点型"></a>枚举的类型可以是 String 和浮点型</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sports</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> football, basketball</span><br><span class="line">    <span class="keyword">case</span> running = <span class="string">"run"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Sports</span>.football.rawValue) <span class="comment">// football</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Sports</span>.running.rawValue) <span class="comment">// run</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Eyesight</span>: <span class="title">Float</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> a</span><br><span class="line">    <span class="keyword">case</span> b</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">c</span> = <span class="number">5.2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Eyesight</span>.a.rawValue) <span class="comment">// 0.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Eyesight</span>.<span class="built_in">c</span>.rawValue) <span class="comment">// 5.2</span></span><br></pre></td></tr></table></figure><h2 id="可以使用-rawValue-来初始化一个枚举"><a href="#可以使用-rawValue-来初始化一个枚举" class="headerlink" title="可以使用 rawValue 来初始化一个枚举"></a>可以使用 rawValue 来初始化一个枚举</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> convertedRank = <span class="type">Rank</span>(rawValue: <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> threeDescription = convertedRank.simpleDescription()</span><br><span class="line">    <span class="built_in">print</span>(threeDescription)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举的-case-值就是实际的值，而不仅仅写它们的-rawValue-一种方式，如果没有很有意义的值，可以不必写。"><a href="#枚举的-case-值就是实际的值，而不仅仅写它们的-rawValue-一种方式，如果没有很有意义的值，可以不必写。" class="headerlink" title="枚举的 case 值就是实际的值，而不仅仅写它们的 rawValue 一种方式，如果没有很有意义的值，可以不必写。"></a>枚举的 case 值就是实际的值，而不仅仅写它们的 rawValue 一种方式，如果没有很有意义的值，可以不必写。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Suit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> spades, hearts, diamonds, clubs</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">simpleDescription</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .spades:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"spades"</span></span><br><span class="line">        <span class="keyword">case</span> .hearts:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hearts"</span></span><br><span class="line">        <span class="keyword">case</span> .diamonds:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"diamonds"</span></span><br><span class="line">        <span class="keyword">case</span> .clubs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"clubs"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">color</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .spades, .clubs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"black"</span></span><br><span class="line">        <span class="keyword">case</span> .hearts, .diamonds:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"diamonds"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> hearts = <span class="type">Suit</span>.hearts</span><br><span class="line"><span class="keyword">let</span> heartsDescription = hearts.simpleDescription()</span><br><span class="line"><span class="built_in">print</span>(<span class="type">Suit</span>.spades.color())  <span class="comment">// black</span></span><br></pre></td></tr></table></figure><h2 id="上面枚举例子在它定义时就已经确定了，并且相同的-case-的原始值都相同。还有一种情况是，枚举关联的原始值可以在它实例化时才确定，并且原始值可以不同"><a href="#上面枚举例子在它定义时就已经确定了，并且相同的-case-的原始值都相同。还有一种情况是，枚举关联的原始值可以在它实例化时才确定，并且原始值可以不同" class="headerlink" title="上面枚举例子在它定义时就已经确定了，并且相同的 case 的原始值都相同。还有一种情况是，枚举关联的原始值可以在它实例化时才确定，并且原始值可以不同"></a>上面枚举例子在它定义时就已经确定了，并且相同的 case 的原始值都相同。还有一种情况是，枚举关联的原始值可以在它实例化时才确定，并且原始值可以不同</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ServerResponse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> result(<span class="type">String</span>, <span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> failure(<span class="type">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> success = <span class="type">ServerResponse</span>.result(<span class="string">"6:00 am"</span>, <span class="string">"8:09 pm"</span>)</span><br><span class="line"><span class="keyword">let</span> failure = <span class="type">ServerResponse</span>.failure(<span class="string">"Out of cheese."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> success &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span>.result(sunrise, sunset):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Sunrise is at \(sunrise) and sunset is at \(sunset)."</span>) <span class="comment">// Sunrise is at 6:00 am and sunset is at 8:09 pm.</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .failure(message):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Failure...  \(message)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-struct-关键字来创建一个结构体，结构体支持很多与类相同的行为，包括方法和初始化方法。其中最重要的不同是结构体是一直被拷贝在传值的时候，而类是被当作引用来传递的。"><a href="#使用-struct-关键字来创建一个结构体，结构体支持很多与类相同的行为，包括方法和初始化方法。其中最重要的不同是结构体是一直被拷贝在传值的时候，而类是被当作引用来传递的。" class="headerlink" title="使用 struct 关键字来创建一个结构体，结构体支持很多与类相同的行为，包括方法和初始化方法。其中最重要的不同是结构体是一直被拷贝在传值的时候，而类是被当作引用来传递的。"></a>使用 struct 关键字来创建一个结构体，结构体支持很多与类相同的行为，包括方法和初始化方法。其中最重要的不同是结构体是一直被拷贝在传值的时候，而类是被当作引用来传递的。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Card</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rank: <span class="type">Rank</span></span><br><span class="line">    <span class="keyword">var</span> suit: <span class="type">Suit</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">simpleDescription</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The \(rank.simpleDescription()) of \(suit.simpleDescription())"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> threeOfSpades = <span class="type">Card</span>(rank: .three, suit: .spades)</span><br><span class="line"><span class="keyword">let</span> threeOfSpadesDescription = threeOfSpades.simpleDescription()</span><br></pre></td></tr></table></figure><blockquote><p>参考：1. <a href="https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html" target="_blank" rel="noopener">苹果官网 swift 指南</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;枚举和结构体&quot;&gt;&lt;a href=&quot;#枚举和结构体&quot; class=&quot;headerlink&quot; title=&quot;枚举和结构体&quot;&gt;&lt;/a&gt;枚举和结构体&lt;/h1&gt;&lt;h2 id=&quot;使用-enum-来创建一个枚举，像创建类和其他命名的类型一样，枚举可以有方法。&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="ios" scheme="https://www.zhangguangqun.com/categories/ios/"/>
    
      <category term="swift" scheme="https://www.zhangguangqun.com/categories/ios/swift/"/>
    
    
      <category term="swift" scheme="https://www.zhangguangqun.com/tags/swift/"/>
    
      <category term="ios" scheme="https://www.zhangguangqun.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>swift 语言学习 - 4. 对象和类</title>
    <link href="https://www.zhangguangqun.com/20190421/swift04/"/>
    <id>https://www.zhangguangqun.com/20190421/swift04/</id>
    <published>2019-04-21T12:53:23.000Z</published>
    <updated>2019-04-21T13:04:41.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h1><h2 id="在-class-关键字后面跟随一个类的名字来创建一个类。给类声明一个属性和普通的声明一个常量和变量的写法是一样的，只不过在类中声明的属性属于类的上下文。同样的，声明一个方法和函数是同样的写法。"><a href="#在-class-关键字后面跟随一个类的名字来创建一个类。给类声明一个属性和普通的声明一个常量和变量的写法是一样的，只不过在类中声明的属性属于类的上下文。同样的，声明一个方法和函数是同样的写法。" class="headerlink" title="在 class 关键字后面跟随一个类的名字来创建一个类。给类声明一个属性和普通的声明一个常量和变量的写法是一样的，只不过在类中声明的属性属于类的上下文。同样的，声明一个方法和函数是同样的写法。"></a>在 class 关键字后面跟随一个类的名字来创建一个类。给类声明一个属性和普通的声明一个常量和变量的写法是一样的，只不过在类中声明的属性属于类的上下文。同样的，声明一个方法和函数是同样的写法。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"zhangguangqun"</span></span><br><span class="line">    <span class="keyword">let</span> greetWord = <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    类中声明的属性的需要初始化，否则编译出错</span></span><br><span class="line"><span class="comment">//    var age: Int  // stored property 'age' without initial value prevents synthesized initializers</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">selfIntroduction</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"\(greetWord), my name is \(name)."</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(name: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"\(greetWord), \(name)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建类的实例，及使用实例来访问实例的属性和方法。"><a href="#创建类的实例，及使用实例来访问实例的属性和方法。" class="headerlink" title="创建类的实例，及使用实例来访问实例的属性和方法。"></a>创建类的实例，及使用实例来访问实例的属性和方法。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="type">Person</span>()</span><br><span class="line"><span class="built_in">print</span>(p.selfIntroduction()) <span class="comment">// hello, my name is zhangguangqun.</span></span><br><span class="line"><span class="built_in">print</span>(p.greet(name: <span class="string">"jack"</span>)) <span class="comment">// hello, jack</span></span><br></pre></td></tr></table></figure><h2 id="类的初始化，使用-init-初始化-注意-init-方法前没有-func-关键字，也不会有返回值-，init-方法可以重载。"><a href="#类的初始化，使用-init-初始化-注意-init-方法前没有-func-关键字，也不会有返回值-，init-方法可以重载。" class="headerlink" title="类的初始化，使用 init 初始化 (注意 init 方法前没有 func 关键字，也不会有返回值)，init 方法可以重载。"></a>类的初始化，使用 init 初始化 (注意 init 方法前没有 func 关键字，也不会有返回值)，init 方法可以重载。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruits</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> weight: <span class="type">Float</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(color: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.color = color</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(color: <span class="type">String</span>, weight: <span class="type">Float</span>) &#123;</span><br><span class="line"><span class="comment">//        使用 self 表示该实例，来区分实例属性和方法传进来的参数。</span></span><br><span class="line">        <span class="keyword">self</span>.color = color</span><br><span class="line">        <span class="keyword">self</span>.weight = weight</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">description</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"the color of this fruit is \(color), it weight \(weight)g"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apple = <span class="type">Fruits</span>(color: <span class="string">"红色"</span>)</span><br><span class="line"><span class="keyword">var</span> banana = <span class="type">Fruits</span>(color: <span class="string">"黄色"</span>, weight: <span class="number">80</span>)</span><br><span class="line">apple.description() <span class="comment">// the color of this fruit is 红色, it weight 0.0g</span></span><br><span class="line">banana.description() <span class="comment">// the color of this fruit is 黄色, it weight 80.0g</span></span><br></pre></td></tr></table></figure><h2 id="类的继承，子类覆盖父类的方法必须要在方法前写上-override-关键字。"><a href="#类的继承，子类覆盖父类的方法必须要在方法前写上-override-关键字。" class="headerlink" title="类的继承，子类覆盖父类的方法必须要在方法前写上 override 关键字。"></a>类的继承，子类覆盖父类的方法必须要在方法前写上 override 关键字。</h2><p>对于子类没有自己的 init 初始化方法时，需要使用父类的 init 方法来初始化。对于子类有自己的 init 初始化方法时，它必须调用 super.init 。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span>: <span class="title">Fruits</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    init(color: String, price: Double) &#123;</span></span><br><span class="line"><span class="comment">//        self.color = color</span></span><br><span class="line"><span class="comment">//        self.price = price</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面 init 这样的写法会产生如下错误：</span></span><br><span class="line"><span class="comment">//    1. error: 'super.init' isn't called on all paths before returning from initializer</span></span><br><span class="line"><span class="comment">//    2. error: 'self' used in property access 'color' before 'super.init' call self.color = color</span></span><br><span class="line"><span class="comment">//  从这两个错误信息可以看出，在子类的构造器中，父类的成员变量必须通过父类的designated initializer进行初始化。也就是说，我们必须调用super.init（第一个error），而且在调用super.init之前不能使用和访问任何父类的成员变量（第二个error）。</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(color: <span class="type">String</span>, price: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.price = price</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(color: color)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">description</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"这是苹果"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appleFruit = <span class="type">Apple</span>(color: <span class="string">"红色"</span>, price: <span class="number">80</span>)</span><br><span class="line">appleFruit.description()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类有自己的 init 方法，那么它只能调用自己 init 方法来初始化实例，不能调用父类的 init 方法。</span></span><br><span class="line"><span class="comment">// var appleFruit1 = Apple(color: "红色", weight: 80) // error: incorrect argument label in call (have 'color:weight:', expected 'color:price:')</span></span><br></pre></td></tr></table></figure><h2 id="除了存储简单的属性之外，属性还可以有-getter-和-setter"><a href="#除了存储简单的属性之外，属性还可以有-getter-和-setter" class="headerlink" title="除了存储简单的属性之外，属性还可以有 getter 和 setter."></a>除了存储简单的属性之外，属性还可以有 getter 和 setter.</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana</span>: <span class="title">Fruits</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price: <span class="type">Double</span> = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> weightKg: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Double</span>(weight / <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            weight = <span class="type">Float</span>(newValue * <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> banana2 = <span class="type">Banana</span>(color: <span class="string">"黄色"</span>, weight: <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(banana2.weightKg) <span class="comment">// 1.0</span></span><br><span class="line">banana2.weightKg = <span class="number">0.5</span></span><br><span class="line"><span class="built_in">print</span>(banana2.weight) <span class="comment">// 500.0</span></span><br></pre></td></tr></table></figure><h2 id="如果你不需要计算属性，但是任然需要在设置新的值后做些操作，使用-willSet-和-didSet-。"><a href="#如果你不需要计算属性，但是任然需要在设置新的值后做些操作，使用-willSet-和-didSet-。" class="headerlink" title="如果你不需要计算属性，但是任然需要在设置新的值后做些操作，使用 willSet 和 didSet 。"></a>如果你不需要计算属性，但是任然需要在设置新的值后做些操作，使用 willSet 和 didSet 。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitBasket</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> apple: <span class="type">Apple</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="comment">// 确保当 apple 属性被赋予新值时，banana 的 price 比 apple 的 price 低 2</span></span><br><span class="line">            banana.price = newValue.price - <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> banana: <span class="type">Banana</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            <span class="comment">// 确保当 banana 属性被赋予新值时，apple 的 price 比 banana 的 price 高 2</span></span><br><span class="line">            apple.price = newValue.price + <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>(price: <span class="type">Double</span>) &#123;</span><br><span class="line">        apple = <span class="type">Apple</span>(color: <span class="string">"红色"</span>, price: price)</span><br><span class="line">        banana = <span class="type">Banana</span>(color: <span class="string">"黄色"</span>)</span><br><span class="line">        banana.price = apple.price - <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fruitBasket = <span class="type">FruitBasket</span>(price: <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(fruitBasket.apple.price) <span class="comment">// 10.0</span></span><br><span class="line"><span class="built_in">print</span>(fruitBasket.banana.price) <span class="comment">// 8.0</span></span><br><span class="line">fruitBasket.apple = <span class="type">Apple</span>(color: <span class="string">"红色"</span>, price: <span class="number">12</span>)</span><br><span class="line"><span class="built_in">print</span>(fruitBasket.apple.price) <span class="comment">// 12.0</span></span><br><span class="line"><span class="built_in">print</span>(fruitBasket.banana.price) <span class="comment">// 10.0</span></span><br></pre></td></tr></table></figure><h2 id="对于一个可选值的类的实例，可以在方法、属性、下标前写上-来访问。如果这个实例是-nil，那么在-之后的会被忽略，这个表达式的值是-nil。如果可选值不为-nil，那么可选值会被展开。对于这两种情况，整个表达式的值都是一个可选值。"><a href="#对于一个可选值的类的实例，可以在方法、属性、下标前写上-来访问。如果这个实例是-nil，那么在-之后的会被忽略，这个表达式的值是-nil。如果可选值不为-nil，那么可选值会被展开。对于这两种情况，整个表达式的值都是一个可选值。" class="headerlink" title="对于一个可选值的类的实例，可以在方法、属性、下标前写上 (?) 来访问。如果这个实例是 nil，那么在 ? 之后的会被忽略，这个表达式的值是 nil。如果可选值不为 nil，那么可选值会被展开。对于这两种情况，整个表达式的值都是一个可选值。"></a>对于一个可选值的类的实例，可以在方法、属性、下标前写上 (?) 来访问。如果这个实例是 nil，那么在 ? 之后的会被忽略，这个表达式的值是 nil。如果可选值不为 nil，那么可选值会被展开。对于这两种情况，整个表达式的值都是一个可选值。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="type">Apple?</span> = <span class="type">Apple</span>(color: <span class="string">"红色"</span>, price: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> price = a?.price</span><br></pre></td></tr></table></figure><blockquote><p>参考：1. <a href="https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html" target="_blank" rel="noopener">苹果官网 swift 指南</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对象和类&quot;&gt;&lt;a href=&quot;#对象和类&quot; class=&quot;headerlink&quot; title=&quot;对象和类&quot;&gt;&lt;/a&gt;对象和类&lt;/h1&gt;&lt;h2 id=&quot;在-class-关键字后面跟随一个类的名字来创建一个类。给类声明一个属性和普通的声明一个常量和变量的写法是一样的，
      
    
    </summary>
    
      <category term="ios" scheme="https://www.zhangguangqun.com/categories/ios/"/>
    
      <category term="swift" scheme="https://www.zhangguangqun.com/categories/ios/swift/"/>
    
    
      <category term="swift" scheme="https://www.zhangguangqun.com/tags/swift/"/>
    
      <category term="ios" scheme="https://www.zhangguangqun.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>swift 语言学习 - 3. 函数和闭包</title>
    <link href="https://www.zhangguangqun.com/20190418/swift03/"/>
    <id>https://www.zhangguangqun.com/20190418/swift03/</id>
    <published>2019-04-18T13:36:02.000Z</published>
    <updated>2019-04-18T13:43:01.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数和闭包"><a href="#函数和闭包" class="headerlink" title="函数和闭包"></a>函数和闭包</h1><h2 id="1-使用-func-来声明函数。调用函数时，传参和函数声明时的参数列表变量的名字保持一致。使用-gt-在返回参数前且在函数参数列表后。"><a href="#1-使用-func-来声明函数。调用函数时，传参和函数声明时的参数列表变量的名字保持一致。使用-gt-在返回参数前且在函数参数列表后。" class="headerlink" title="1. 使用 func 来声明函数。调用函数时，传参和函数声明时的参数列表变量的名字保持一致。使用 -&gt; 在返回参数前且在函数参数列表后。"></a>1. 使用 func 来声明函数。调用函数时，传参和函数声明时的参数列表变量的名字保持一致。使用 -&gt; 在返回参数前且在函数参数列表后。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(name: String, day: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello, \(name), today is \(day)"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(sayHello(name: <span class="string">"zhangsan"</span>, day: <span class="string">"星期三"</span>)) <span class="comment">// hello, zhangsan, today is 星期三</span></span><br></pre></td></tr></table></figure><h2 id="2-函数使用参数的名字作为标签，调用该函数时根据这个标签来传参数。另外，可以在参数的名字前写一个自定义的标签，或者写下划线-来表示不使用标签。"><a href="#2-函数使用参数的名字作为标签，调用该函数时根据这个标签来传参数。另外，可以在参数的名字前写一个自定义的标签，或者写下划线-来表示不使用标签。" class="headerlink" title="2. 函数使用参数的名字作为标签，调用该函数时根据这个标签来传参数。另外，可以在参数的名字前写一个自定义的标签，或者写下划线 _ 来表示不使用标签。"></a>2. 函数使用参数的名字作为标签，调用该函数时根据这个标签来传参数。另外，可以在参数的名字前写一个自定义的标签，或者写下划线 _ 来表示不使用标签。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(userName name: String, <span class="number">_</span> day: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello, \(name), today is \(day)"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(greet(userName: <span class="string">"zhangsan"</span>, <span class="string">"星期四"</span>)) <span class="comment">// hello, zhangsan, today is 星期四</span></span><br></pre></td></tr></table></figure><h2 id="3-使用一个元祖来构成一个混合的值。例如，一个函数返回多个值，一个元祖的元素能够通过名字或者编号来引用。"><a href="#3-使用一个元祖来构成一个混合的值。例如，一个函数返回多个值，一个元祖的元素能够通过名字或者编号来引用。" class="headerlink" title="3. 使用一个元祖来构成一个混合的值。例如，一个函数返回多个值，一个元祖的元素能够通过名字或者编号来引用。"></a>3. 使用一个元祖来构成一个混合的值。例如，一个函数返回多个值，一个元祖的元素能够通过名字或者编号来引用。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculateStatistics</span><span class="params">(scores: [Int])</span></span> -&gt; (<span class="built_in">min</span>: <span class="type">Int</span>, <span class="built_in">max</span>: <span class="type">Int</span>, sum: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">min</span> = scores[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">max</span> = scores[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> score <span class="keyword">in</span> scores &#123;</span><br><span class="line">        <span class="keyword">if</span> score &gt; <span class="built_in">max</span> &#123;</span><br><span class="line">            <span class="built_in">max</span> = score</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &lt; <span class="built_in">min</span> &#123;</span><br><span class="line">            <span class="built_in">min</span> = score</span><br><span class="line">        &#125;</span><br><span class="line">        sum += score</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">min</span>, <span class="built_in">max</span>, sum)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> statistics = calculateStatistics(scores: [<span class="number">5</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(statistics.sum) <span class="comment">// 120</span></span><br><span class="line"><span class="built_in">print</span>(statistics.<span class="number">2</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><h2 id="4-函数能够嵌套，嵌套函数有外层函数声明的变量的访问权限。你能使用嵌套函数来组织在函数里很长或者很复杂的代码。"><a href="#4-函数能够嵌套，嵌套函数有外层函数声明的变量的访问权限。你能使用嵌套函数来组织在函数里很长或者很复杂的代码。" class="headerlink" title="4. 函数能够嵌套，嵌套函数有外层函数声明的变量的访问权限。你能使用嵌套函数来组织在函数里很长或者很复杂的代码。"></a>4. 函数能够嵌套，嵌套函数有外层函数声明的变量的访问权限。你能使用嵌套函数来组织在函数里很长或者很复杂的代码。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnFifteen</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">        y += <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">    add()</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line">returnFifteen()</span><br></pre></td></tr></table></figure><h2 id="5-函数是-first-class-类型的，这意味着一个函数能够返回另外一个函数作为它的返回值。"><a href="#5-函数是-first-class-类型的，这意味着一个函数能够返回另外一个函数作为它的返回值。" class="headerlink" title="5. 函数是 first-class 类型的，这意味着一个函数能够返回另外一个函数作为它的返回值。"></a>5. 函数是 first-class 类型的，这意味着一个函数能够返回另外一个函数作为它的返回值。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeIncrementer</span><span class="params">()</span></span> -&gt; ((<span class="type">Int</span>) -&gt; <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addOne</span><span class="params">(number: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> addOne</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> increment = makeIncrementer()</span><br><span class="line">increment(<span class="number">7</span>) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h2 id="6-一个函数可以用另外一个函数作为他的参数。"><a href="#6-一个函数可以用另外一个函数作为他的参数。" class="headerlink" title="6. 一个函数可以用另外一个函数作为他的参数。"></a>6. 一个函数可以用另外一个函数作为他的参数。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasAnyMatches</span><span class="params">(list: [Int], condition: <span class="params">(Int)</span></span></span> -&gt; <span class="type">Bool</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list &#123;</span><br><span class="line">        <span class="keyword">if</span> condition(item) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lessThanTen</span><span class="params">(number: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> number &lt; <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">20</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">12</span>]</span><br><span class="line">hasAnyMatches(list: numbers, condition: lessThanTen)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="7-闭包，看官网的例子细细体会😄"><a href="#7-闭包，看官网的例子细细体会😄" class="headerlink" title="7. 闭包，看官网的例子细细体会😄"></a>7. 闭包，看官网的例子细细体会😄</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = numbers.<span class="built_in">map</span>(&#123; (number: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">3</span> * number</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 数组的每个值乘以3</span></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment">// [60, 57, 21, 36]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写版</span></span><br><span class="line"><span class="keyword">let</span> mappedNumbers = numbers.<span class="built_in">map</span>(&#123; number <span class="keyword">in</span> <span class="number">3</span> * number &#125;)</span><br><span class="line"><span class="built_in">print</span>(mappedNumbers)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更多例子</span></span><br><span class="line"><span class="keyword">let</span> sortedNumbers = numbers.sorted &#123; $<span class="number">0</span> &gt; $<span class="number">1</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(sortedNumbers)</span><br></pre></td></tr></table></figure><blockquote><p>参考：1. <a href="https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html" target="_blank" rel="noopener">苹果官网 swift 指南</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数和闭包&quot;&gt;&lt;a href=&quot;#函数和闭包&quot; class=&quot;headerlink&quot; title=&quot;函数和闭包&quot;&gt;&lt;/a&gt;函数和闭包&lt;/h1&gt;&lt;h2 id=&quot;1-使用-func-来声明函数。调用函数时，传参和函数声明时的参数列表变量的名字保持一致。使用-gt-在返
      
    
    </summary>
    
      <category term="ios" scheme="https://www.zhangguangqun.com/categories/ios/"/>
    
      <category term="swift" scheme="https://www.zhangguangqun.com/categories/ios/swift/"/>
    
    
      <category term="swift" scheme="https://www.zhangguangqun.com/tags/swift/"/>
    
      <category term="ios" scheme="https://www.zhangguangqun.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>swift 语言学习 - 2. 流程控制</title>
    <link href="https://www.zhangguangqun.com/20190416/swift02/"/>
    <id>https://www.zhangguangqun.com/20190416/swift02/</id>
    <published>2019-04-16T13:37:22.000Z</published>
    <updated>2019-04-18T13:43:01.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="用-if-和-switch-来做条件控制，用-for-in-while-和-repeat-while-来做循环。"><a href="#用-if-和-switch-来做条件控制，用-for-in-while-和-repeat-while-来做循环。" class="headerlink" title="用 if 和 switch 来做条件控制，用 for-in, while, 和 repeat-while 来做循环。"></a>用 if 和 switch 来做条件控制，用 for-in, while, 和 repeat-while 来做循环。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> individualScores = [<span class="number">75</span>, <span class="number">86</span>, <span class="number">62</span>, <span class="number">50</span>]</span><br><span class="line"><span class="keyword">var</span> teamScores = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> score <span class="keyword">in</span> individualScores &#123;</span><br><span class="line"><span class="comment">//    if score &#123;     // if 后的条件需要是 Bool 的值或者表达式</span></span><br><span class="line">    <span class="keyword">if</span> score &gt;= <span class="number">80</span> &#123;</span><br><span class="line">        teamScores += <span class="number">2</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">80</span> &#123;</span><br><span class="line">        teamScores += <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        teamScores -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(teamScores)</span><br></pre></td></tr></table></figure><h2 id="可以将-if-和-let-组合使用，来处理变量值可能缺失的情况-值为-nil-。在变量的类型后加上-来表示该变量值是可选的"><a href="#可以将-if-和-let-组合使用，来处理变量值可能缺失的情况-值为-nil-。在变量的类型后加上-来表示该变量值是可选的" class="headerlink" title="可以将 if 和 let 组合使用，来处理变量值可能缺失的情况(值为 nil)。在变量的类型后加上 (?) 来表示该变量值是可选的"></a>可以将 if 和 let 组合使用，来处理变量值可能缺失的情况(值为 nil)。在变量的类型后加上 (?) 来表示该变量值是可选的</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalString: <span class="type">String?</span></span><br><span class="line"><span class="built_in">print</span>(optionalString)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> optionalName: <span class="type">String?</span> = <span class="string">"zhang"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = optionalName &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello \(name)"</span>) <span class="comment">// hello zhang</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="另一种处理可选值的变量的情况是使用-操作符，如果可选值缺失了，那么就会使用默认值。"><a href="#另一种处理可选值的变量的情况是使用-操作符，如果可选值缺失了，那么就会使用默认值。" class="headerlink" title="另一种处理可选值的变量的情况是使用 (??) 操作符，如果可选值缺失了，那么就会使用默认值。"></a>另一种处理可选值的变量的情况是使用 (??) 操作符，如果可选值缺失了，那么就会使用默认值。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nickName: <span class="type">String?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> defaultName =  <span class="string">"Zhang San"</span></span><br><span class="line"><span class="keyword">let</span> name = nickName ?? defaultName</span><br><span class="line"><span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><h2 id="Switches-支持任何类型的数据和多样的比较的类型。每个-case-后面不需要加-break-执行一个分支后不会继续往后执行。"><a href="#Switches-支持任何类型的数据和多样的比较的类型。每个-case-后面不需要加-break-执行一个分支后不会继续往后执行。" class="headerlink" title="Switches 支持任何类型的数据和多样的比较的类型。每个 case 后面不需要加 break, 执行一个分支后不会继续往后执行。"></a>Switches 支持任何类型的数据和多样的比较的类型。每个 case 后面不需要加 break, 执行一个分支后不会继续往后执行。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = <span class="string">"香蕉"</span></span><br><span class="line"><span class="keyword">switch</span> fruits &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"苹果"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"是苹果"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"橘子"</span>, <span class="string">"香蕉"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"橘子和香蕉中的一种"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> x <span class="keyword">where</span> x.hasSuffix(<span class="string">"子"</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"水果名是以子结尾"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"猜不出来是什么"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="swift-中的-while-和其他语言一样。repeat-while-和其他语言的-do-while-一样。"><a href="#swift-中的-while-和其他语言一样。repeat-while-和其他语言的-do-while-一样。" class="headerlink" title="swift 中的 while 和其他语言一样。repeat-while 和其他语言的 do-while 一样。"></a>swift 中的 while 和其他语言一样。repeat-while 和其他语言的 do-while 一样。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">100</span> &#123;</span><br><span class="line">    n *= <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">2</span></span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    m *= <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">while</span> m &lt; <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><h2 id="数组和字典的-for-in"><a href="#数组和字典的-for-in" class="headerlink" title="数组和字典的 for-in"></a>数组和字典的 for-in</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> interestingNumbers = [</span><br><span class="line">    <span class="string">"Prime"</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>],</span><br><span class="line">    <span class="string">"Fibonacci"</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">    <span class="string">"Square"</span>: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>],</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> largest = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (kind, numbers) <span class="keyword">in</span> interestingNumbers &#123;</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</span><br><span class="line">        <span class="keyword">if</span> number &gt; largest &#123;</span><br><span class="line">            largest = number</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(largest)</span><br><span class="line"><span class="comment">// Prints "25"</span></span><br></pre></td></tr></table></figure><h2 id="使用-lt-来遍历一个范围的索引，-lt-不包括上界值。使用-…-可以包含两边的值"><a href="#使用-lt-来遍历一个范围的索引，-lt-不包括上界值。使用-…-可以包含两边的值" class="headerlink" title="使用 ..&lt; 来遍历一个范围的索引，..&lt; 不包括上界值。使用 … 可以包含两边的值"></a>使用 ..&lt; 来遍历一个范围的索引，..&lt; 不包括上界值。使用 … 可以包含两边的值</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;<span class="number">4</span> &#123;</span><br><span class="line">    total += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(total)</span><br></pre></td></tr></table></figure><blockquote><p>参考：1. <a href="https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html" target="_blank" rel="noopener">苹果官网 swift 指南</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;流程控制&quot;&gt;&lt;a href=&quot;#流程控制&quot; class=&quot;headerlink&quot; title=&quot;流程控制&quot;&gt;&lt;/a&gt;流程控制&lt;/h1&gt;&lt;h2 id=&quot;用-if-和-switch-来做条件控制，用-for-in-while-和-repeat-while-来做循环。&quot;
      
    
    </summary>
    
      <category term="ios" scheme="https://www.zhangguangqun.com/categories/ios/"/>
    
      <category term="swift" scheme="https://www.zhangguangqun.com/categories/ios/swift/"/>
    
    
      <category term="swift" scheme="https://www.zhangguangqun.com/tags/swift/"/>
    
      <category term="ios" scheme="https://www.zhangguangqun.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>swift 语言学习 - 1. 简单值</title>
    <link href="https://www.zhangguangqun.com/20190413/swift01/"/>
    <id>https://www.zhangguangqun.com/20190413/swift01/</id>
    <published>2019-04-13T13:34:43.000Z</published>
    <updated>2019-04-15T13:47:21.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开始学习移动端的知识，从 ios 的 swift 语言开始。</p><h1 id="swift-的-hello-world"><a href="#swift-的-hello-world" class="headerlink" title="swift 的 hello world:"></a>swift 的 hello world:</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><h1 id="1-简单值"><a href="#1-简单值" class="headerlink" title="1. 简单值"></a>1. 简单值</h1><h2 id="1-1-用-var-来定义变量，用-let-来定义常量，常量值不能变"><a href="#1-1-用-var-来定义变量，用-let-来定义常量，常量值不能变" class="headerlink" title="1.1 用 var 来定义变量，用 let 来定义常量，常量值不能变"></a>1.1 用 var 来定义变量，用 let 来定义常量，常量值不能变</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">a = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="1-2-声明变量时可以不显示地写出变量值的类型，让编译器根据变量值推断变量的类型。如果变量值没有足够的信息来推断出变量的类型，可以显示声明变量的类型"><a href="#1-2-声明变量时可以不显示地写出变量值的类型，让编译器根据变量值推断变量的类型。如果变量值没有足够的信息来推断出变量的类型，可以显示声明变量的类型" class="headerlink" title="1.2 声明变量时可以不显示地写出变量值的类型，让编译器根据变量值推断变量的类型。如果变量值没有足够的信息来推断出变量的类型，可以显示声明变量的类型"></a>1.2 声明变量时可以不显示地写出变量值的类型，让编译器根据变量值推断变量的类型。如果变量值没有足够的信息来推断出变量的类型，可以显示声明变量的类型</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> valueInterger = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> valueDouble = <span class="number">10.0</span></span><br><span class="line"><span class="keyword">let</span> explicitDouble: <span class="type">Double</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="1-3-值的类型不会隐示的转换，只能显示的进行转换"><a href="#1-3-值的类型不会隐示的转换，只能显示的进行转换" class="headerlink" title="1.3 值的类型不会隐示的转换，只能显示的进行转换"></a>1.3 值的类型不会隐示的转换，只能显示的进行转换</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> label = <span class="string">"This width is "</span></span><br><span class="line"><span class="keyword">let</span> width = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> widthLabel = label + <span class="type">String</span>(width)</span><br></pre></td></tr></table></figure><h2 id="1-4-一种简单的方式将值嵌入到字符串里"><a href="#1-4-一种简单的方式将值嵌入到字符串里" class="headerlink" title="1.4 一种简单的方式将值嵌入到字符串里"></a>1.4 一种简单的方式将值嵌入到字符串里</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> apples = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> oranges = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> appleSummary = <span class="string">"I have \(apples) apples."</span></span><br><span class="line"><span class="keyword">let</span> fruitSummary = <span class="string">"I have \(apples + oranges) pieces of fruit."</span></span><br></pre></td></tr></table></figure><h2 id="1-5-多行的字符串用-“””"><a href="#1-5-多行的字符串用-“””" class="headerlink" title="1.5 多行的字符串用 “””"></a>1.5 多行的字符串用 “””</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quotation = <span class="string">"""</span></span><br><span class="line"><span class="string">Even though there's whitespace to the left,</span></span><br><span class="line"><span class="string">the actual lines aren't indented.</span></span><br><span class="line"><span class="string">Except for this line.</span></span><br><span class="line"><span class="string">Double quotes (") can appear without being escaped.</span></span><br><span class="line"><span class="string">\"</span></span><br><span class="line"><span class="string">I still have \(apples + oranges) pieces of fruit.</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="1-6-数组和字典"><a href="#1-6-数组和字典" class="headerlink" title="1.6 数组和字典"></a>1.6 数组和字典</h2><h3 id="数组的类型需要一致，字典的值也需要一致"><a href="#数组的类型需要一致，字典的值也需要一致" class="headerlink" title="数组的类型需要一致，字典的值也需要一致"></a>数组的类型需要一致，字典的值也需要一致</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.append(<span class="number">4</span>)</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> dict = [<span class="string">"k1"</span>: <span class="string">"v1"</span>, <span class="string">"k2"</span>: <span class="string">"v2"</span>]</span><br><span class="line">dict[<span class="string">"k3"</span>] = <span class="string">"k3"</span></span><br><span class="line"><span class="built_in">print</span>(dict)</span><br></pre></td></tr></table></figure><h2 id="1-7-定义空的数组和空的字典"><a href="#1-7-定义空的数组和空的字典" class="headerlink" title="1.7 定义空的数组和空的字典"></a>1.7 定义空的数组和空的字典</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyArray = [<span class="type">String</span>]()</span><br><span class="line"><span class="keyword">var</span> emptyDictionary = [<span class="type">String</span>: <span class="type">String</span>]()</span><br></pre></td></tr></table></figure><h3 id="如果数组和字典的值能够被推断，那么可以用-和-来表示。比如给一个变量赋新值或者给一个方法传参。"><a href="#如果数组和字典的值能够被推断，那么可以用-和-来表示。比如给一个变量赋新值或者给一个方法传参。" class="headerlink" title="如果数组和字典的值能够被推断，那么可以用 [] 和 [:] 来表示。比如给一个变量赋新值或者给一个方法传参。"></a>如果数组和字典的值能够被推断，那么可以用 [] 和 [:] 来表示。比如给一个变量赋新值或者给一个方法传参。</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr = []</span><br><span class="line">dict = [:]</span><br></pre></td></tr></table></figure><blockquote><p>参考：1. <a href="https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html" target="_blank" rel="noopener">苹果官网 swift 指南</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;开始学习移动端的知识，从 ios 的 swift 语言开始。&lt;/p&gt;
&lt;h1 id=&quot;swift-的-hello-world&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="ios" scheme="https://www.zhangguangqun.com/categories/ios/"/>
    
      <category term="swift" scheme="https://www.zhangguangqun.com/categories/ios/swift/"/>
    
    
      <category term="swift" scheme="https://www.zhangguangqun.com/tags/swift/"/>
    
      <category term="ios" scheme="https://www.zhangguangqun.com/tags/ios/"/>
    
  </entry>
  
</feed>
